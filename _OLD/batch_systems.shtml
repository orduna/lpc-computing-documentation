<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<!--#set var="TITLE" value="U.S. CMS - U.S. CMS @ Work - Data and Computing - Facility Operations - Batch System"--><!--#include virtual="/includes/atwork_top.shtml"-->
</head>
<body>
<h1>Data and Computing Facility Operations</h1>
<!-- Sidebar -->
<!--#include virtual="_sidebar.shtml"--><!-- End: Sidebar -->
<h2>Facility Operations: Batch System</h2>
Batch Systems:
<p>The batch system available for users of the UAF is condor which
allows the user to submit jobs into the lpc batch farm or the
production farm. On this page we will describe how to use this batch
system.</p>
<ol>
  <li><strong><a href="#condor_1">How do I use Condor to submit to the
lpc batch farm?</a></strong></li>
  <li><strong><a href="#condor_2">How do I use CondorG to submit to the
production batch farm?</a></strong></li>
</ol>
<p>For any information not covered below, visit the condor user's manual</p>
<a name="condor_1"></a>
<h3>1. How do I use Condor to submit to the lpc batch farm? </h3>
<p>The first step to using the condor system is writing the condor
submit description file. This file will tell the system what you want
it to do and how. Below is an example, which will run a system program
that will sleep for one minute, then quit. If you want to try this out,
copy everything in <span class="red">red(commands)</span> and <span
 class="green">green(code)</span> and paste it into your terminal to
create the file you see below named "sleep_condor". Click on any of the
green lines below to see what it does.</p>
<code class="red">
cat &gt; sleep_condor &lt;&lt; +EOF
</code><br>
<br>
<code>
<a href="#code_01">universe = vanilla</a><br>
<a href="#code_02">Executable = /bin/sleep</a><br>
<a href="#code_03">Requirements = Memory &gt;= 199 &amp;&amp;OpSys ==
"LINUX"&amp;&amp; (Arch != "DUMMY" )</a><br>
<a href="#code_04">Should_Transfer_Files = YES<br>WhenToTransferOutput = ON_EXIT</a><br>
<a href="#code_05">Output =
sleep_\$(Cluster)_\$(Process).stdout</a><br>
<a href="#code_06">Error =
sleep_\$(Cluster)_\$(Process).stderr</a><br>
<a href="#code_07">Log = sleep_\$(Cluster)_\$(Process).log</a><br>
<a href="#code_08">notify_user = ${LOGNAME}@FNAL.GOV</a><br>
<a href="#code_09">Arguments = 60</a><br>
<a href="#code_10">Queue 5</a><br>
</code>
<br>
<code class="red"><a href="#code_11" style="color: rgb(170, 0, 0);">+EOF</a><br>
<br>
</code>

Condor jobs are executed on their own 10Gb partition. You must use this space for your job output.
Use the variable
<span style="font-weight: bold;">$_CONDOR_SCRATCH_DIR</span>
for your output path in your job script or .cfg files so that your job output 
will be copied to the submitting directory on job completion.<br>
    <br>
    <br>
  </li>
</ul>
<p>After you've created the file, you can submit it to the condor
system using the command condor_submit followed by the name of your
submit description file, in this example's case "sleep_condor":</p>
<code class="red">condor_submit sleep_condor</code>
<p>Your output should look something like this:</p>
<code class="purple" style="margin-left: 20px;">
[langley@cmswn094 ~]$ condor_submit sleep_condor<br>
Submitting job(s).....<br>
Logging submit event(s).....<br>
5 job(s) submitted to cluster 154.
</code>
<p>You can see the status of all jobs submitted from the node you are
logged on to by using the following command:</p>
<code class="red">condor_q</code>
<p>Your queue ought to show the processes you just submitted, they may
be idle for up to a minute or so, maybe longer if the system is very
busy:</p>
<div style="margin-left: 20px;">
<code class="purple">[langley@cmswn094 ~]$ condor_q<br>
<br>
-- Submitter: cmswn094.fnal.gov : &lt;131.225.207.241:37285&gt; :
cmswn094.fnal.gov
</code>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tbody>
    <tr>
      <td><code class="purple">ID</code></td>
      <td><code class="purple">OWNER</code></td>
      <td><code class="purple">SUBMITTED</code></td>
      <td><code class="purple">RUN_TIME</code></td>
      <td><code class="purple">ST</code></td>
      <td><code class="purple">PRI</code></td>
      <td><code class="purple">SIZE</code></td>
      <td><code class="purple">CMD</code></td>
    </tr>
    <tr>
      <td><code class="purple">154.0</code></td>
      <td><code class="purple">langley</code></td>
      <td><code class="purple">7/27</code></td>
      <td><code class="purple">10:33</code></td>
      <td><code class="purple">0+00:00:00 I</code></td>
      <td><code class="purple">0</code></td>
      <td><code class="purple">0.0</code></td>
      <td><code class="purple">sleep 60</code></td>
    </tr>
    <tr>
      <td><code class="purple">154.1</code></td>
      <td><code class="purple">langley</code></td>
      <td><code class="purple">7/27</code></td>
      <td><code class="purple">10:33</code></td>
      <td><code class="purple">0+00:00:00 I</code></td>
      <td><code class="purple">0</code></td>
      <td><code class="purple">0.0</code></td>
      <td><code class="purple">sleep 60</code></td>
    </tr>
    <tr>
      <td><code class="purple">154.2</code></td>
      <td><code class="purple">langley</code></td>
      <td><code class="purple">7/27</code></td>
      <td><code class="purple">10:33</code></td>
      <td><code class="purple">0+00:00:00 I</code></td>
      <td><code class="purple">0</code></td>
      <td><code class="purple">0.0</code></td>
      <td><code class="purple">sleep 60</code></td>
    </tr>
    <tr>
      <td><code class="purple">154.3</code></td>
      <td><code class="purple">langley</code></td>
      <td><code class="purple">7/27</code></td>
      <td><code class="purple">10:33</code></td>
      <td><code class="purple">0+00:00:00 I</code></td>
      <td><code class="purple">0</code></td>
      <td><code class="purple">0.0</code></td>
      <td><code class="purple">sleep 60</code></td>
    </tr>
    <tr>
      <td><code class="purple">154.4</code></td>
      <td><code class="purple">langley</code></td>
      <td><code class="purple">7/27</code></td>
      <td><code class="purple">10:33</code></td>
      <td><code class="purple">0+00:00:00 I</code></td>
      <td><code class="purple">0</code></td>
      <td><code class="purple">0.0</code></td>
      <td><code class="purple">sleep 60</code></td>
    </tr>
  </tbody>
</table>
<code class="purple">
5 jobs; 5 idle, 0 running, 0 held
</code></div>
<p>In condor, each computer has a separate list of requests (queue into
condor), so sometimes the Job (cluster) number is not sufficient to
uniquely identify a job. In other words, every computer in the condor
system has its own list of jobs and job numbers. If you are still
logged into the computer you submitted your job from, then just using
the job number will work, but if you are on a different computer you
must specify which computer you submitted the job from.</p>
<p>You can specifically get a list of all the jobs and their status for
a specific user from any machine using this command:</p>
<code class="red">condor_q -submitter <username></username></code>
<p>If you want to view the entire queue for a machine that you are not
logged onto then you can use the following command. This is gives you
the same information as condor_q (albeit in a different format) without
needing to be logged into that particular machine. Say you submitted
the job from cmswn088.fnal.gov:</p>
<code class="red">condor_status -submitter cmswn094</code>
<p>This gives all the jobs from all users on the machine in question:</p>
<code class="purple">
[langley@cmswn094 ~]$ condor_status -submitter cmswn094
</code>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tbody>
    <tr>
      <td><code class="purple">Name</code></td>
      <td><code class="purple">Machine</code></td>
      <td><code class="purple">Running</code></td>
      <td><code class="purple">IdleJobs</code></td>
      <td><code class="purple">HeldJobs</code></td>
    </tr>
    <tr>
      <td><code class="purple">langley@fnal.gov</code></td>
      <td><code class="purple">cmswn094.f</code></td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<br>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tbody>
    <tr>
      <td>&nbsp;</td>
      <td><code class="purple">RunningJobs</code></td>
      <td><code class="purple">IdleJobs</code></td>
      <td><code class="purple">HeldJobs</code></td>
    </tr>
    <tr>
      <td><code class="purple">langley@fnal.gov</code></td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td><code class="purple">Total</code></td>
      <td>5</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>You can view information about all requests and their submitters
across all the system with this command:</p>
<code class="red">condor_status -submitters</code>
<p>To cancel a job type condor_rm followed by the job number, for this
example, 154:</p>
<code class="red">condor_rm 154</code>
<p>Again if you are now logged into a different node you must supply
the name of the computer from which you submitted the job, for example
if you had been logged onto cmswn088.fnal.gov:</p>
<code class="red">condor_rm -name cmswn094 154</code>
<p>If you don't remember what machine you submitted the job from, use
the condor_q -submitter command from above, it will tell you what
machine you used for your requests.</p>
<hr>
<a name="code_01"></a>
<p><code>universe = vanilla</code><br>
The universe variable defines an execution environment for your job, in
this example we use the vanilla universe which has the least amount of
built in services, but also the least amount of restrictions. For a
complete list of universes and what they do, so the condor user's
manual under 2. Users' Manual &gt; 2.4 Road-map for Running Jobs &gt;
2.4.1 Choosing a Condor Universe. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_02"></a>
<p><code>Executable = /bin/sleep</code><br>
This is the program you want to run. If the program is in the same
directory as your batch file, just the name will work, example:
yourscript.csh. If it is in a different directory than your batch file
then you must give the pathname, example: myscripts/yourscript.csh runs
the script yourscript.csh located in the directory myscripts. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_03"></a>
<p><code>Requirements = Memory &gt;= 199 &amp;&amp; OpSys == "LINUX"
&amp;&amp; (Arch !="dummy")</code><br>
Any requirements for the machine chosen to run your program should be
here. If you exclude this line condor will look for a computer with the
same structure as yours. The requirements here specifiy an Intel
machine or 64-bit machine running a Linux operating system with at
least 199 megabytes of memory. For a complete and long list of possible
requirement settings, see the condor user's manual. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_04"></a>
<p><code>Should_Transfer_Files = YES <BR> WhenToTransferOutput = ON_EXIT </code><br>
This option will take input files from your computer
and send output files back. If this option is not activated then you
must provide input through some other means and extract the output
yourself. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_05"></a>
<p><code>Output = sleep_$(Cluster)_$(Process).stdout</code><br>
This directs the standard output of the program to a file, in other
words, everything that would normally be displayed on the screen, so
that you can read it after it is finished running. Where you see
$(Cluster) condor will substitute the job number, and $(Process) will
become the process number, in this case, 0-4. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_06"></a>
<p><code>Error = sleep_$(Cluster)_$(Process).stderr</code><br>
This is the same as the Output line, except it applies to standard
error, this is extremely useful for debugging or figuring out what is
going wrong (all most always something). Where you see $(Cluster)
condor will substitute the job number, and $(Process) will become the
process number, in this case, 0-4. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_07"></a>
<p><code>Log = sleep_$(Cluster)_$(Process).log</code><br>
The log file contains information about the job in the condor system,
the ip address of the computer that is processing the job, the time it
starts and finishes, how many attempts were made to start the job and
other such data. It is recommended to use a log file, where you see
$(Cluster) condor will substitute the job number, and $(Process) will
become the process number, in this case, 0-4. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_08"></a>
<p><code>notify_user = ${LOGNAME}@FNAL.GOV</code><br>
Specifies to whom the system will automatically email when the job
finishes (your email), in the example, the computer should have put
your email address here. You will recieve a seperate email for every
process in you job that completes. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_09"></a>
<p><code>Arguments = 60</code><br>
Here you put any command line arguments for your program, if you have
none, exclude this line. In this example the program needs one argument
for the number of seconds to wait. This argument tells the program to
wait for one minute. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_10"></a>
<p><code>+LENGTH="SHORT"</code><br>
Include this line to forfeit your job if it runs longer than an hour
real time, without this line your job will be forfeit if it runs longer
than one day real time. It is recommended you include this line for
small jobs. A portion of the production farm is reserved for jobs
labeled short, this combined with the hour limit on everyone in front
of you makes the chances of your job running soon much higher than
without it. With or without this line your job is only dropped after
the time limit when another user would be blocked from the queue by
you, so if no one else is trying to use the system, your job will keep
running past the time limit. <br>
<a href="#condor_1">BACK</a></p>
<a name="code_11"></a>
<p><code>Queue 5</code><br>
This is how many times you want to run the program, without this line
it runs only once. The processes will be numbered starting at zero, so
in this example they will be: 0, 1, 2, 3, and 4. <br>
<a href="#condor_1">BACK</a></p>
<a name="condor_2"></a>
<h3>2. How do I use CondorG to submit to the production batch farm?</h3>
<p>To access the production batch farm you must first have your grid
credentials. If you do not have your grid credentials please follow the
procedures outlines on the SRM page.</p>
<p>Once you have you grid credentials you need to get you grid proxy by
running</p>
<h3>voms-proxy-init -voms cms</h3>
<p>Next you need to modify your job description file as follows:</p>
<ul>
  <li>change <code class="red">universe = vanilla</code> to <code
 class="red">universe = globus</code></li>
  <li>add <code class="red">globusscheduler =
cmsosgce.fnal.gov/jobmanager-condor</code></li>
</ul>
<p>Finally submit you condor job as normal with condor_submit.</p>
<!--#include virtual="/includes/atwork_bottom.shtml"-->
</body>
</html>
